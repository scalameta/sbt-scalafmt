-> p123/compile:scalafmtCheck
-> p123/test:scalafmtCheck
> p123/compile:scalafmt
> p123/test:scalafmt
> p123/compile:scalafmtCheck
> p123/test:scalafmtCheck

# expect failure because of bad build.sbt
-> scalafmtSbtCheck
> scalafmtSbt
> scalafmtSbtCheck

$ copy-file changes/Dependencies.scala project/Dependencies.scala
# expect failure because of bad project/Dependencies.scala
-> scalafmtSbtCheck
> scalafmtSbt
> scalafmtSbtCheck

> p4/scalafmtOnly src/main/scala/Test.scala src/test/scala/MainTest.scala p4.sbt
> p4/compile:scalafmtCheck
> p4/test:scalafmtCheck
> p4/scalafmtSbtCheck

> p5/compile
> p5/test:compile
> p5/compile:scalafmtCheck
> p5/test:scalafmtCheck

> p6/compile:scalafmt
> p6/test:scalafmt
> p6/compile:scalafmtCheck
> p6/test:scalafmtCheck

# expect failure because of missing .scalafmt.conf
-> p7/compile:scalafmt
-> p7/test:scalafmt
-> p7/compile:scalafmtCheck
-> p7/test:scalafmtCheck

> p9/scalafmtAll

> p8/compile:scalafmt
> check
$ sleep 1000
$ touch timestamp
$ sleep 1000
> changeTest2
> p8/compile:scalafmt
$ newer timestamp p8/src/main/scala/Test.scala
$ newer p8/src/main/scala/Test2.scala timestamp

# scalafmt fails if it failed to parse the code.
-> p10/scalafmt
-> p10/scalafmtCheck

# scalafmt fails if .scalafmt.conf is invalid.
-> p11/scalafmt
-> p11/scalafmtCheck

# scalafmt fails if version setting is missing.
-> p12/scalafmt
-> p12/scalafmtCheck

> check

> p13/scalafmt
# prevent reading the source (without changing the mtime) to detect actual/uncached invocation of scalafmt
$ exec chmod 000 p13/src/main/scala/Test.scala
######## no-op expected when nothing has changed
> p13/scalafmt
> p13/scalafmtCheck
######## no-op expected expected when no file was added nor updated
$ delete p13/src/main/scala/Test2.scala
> p13/scalafmt
> p13/scalafmtCheck
######## incremental formatting expected when a file was added
$ copy-file p13/src/test/scala/Test3.scala p13/src/main/scala/Test3.scala
> p13/scalafmt
> p13/scalafmtCheck
-$ must-mirror p13/src/test/scala/Test3.scala p13/src/main/scala/Test3.scala
######## cache invalidation expected when a file was updated
$ touch p13/src/main/scala/Test.scala
-> p13/scalafmt

> p14/scalafmtCheck
# prevent reading the source (without changing the mtime) to detect actual/uncached invocation of scalafmt
$ exec chmod 000 p14/src/main/scala/Test.scala
######## no-op expected when nothing has changed
> p14/scalafmtCheck
> p14/scalafmt
######## no-op expected expected when no file was added nor updated
$ delete p14/src/main/scala/Test2.scala
> p14/scalafmtCheck
> p14/scalafmt
######## incremental checking expected when a file was added
$ copy-file p14/src/test/scala/Test3.scala p14/src/main/scala/Test3.scala
> p14/scalafmtCheck
> p14/scalafmt
######## cache invalidation expected when a file was updated
$ touch p14/src/main/scala/Test.scala
-> p14/scalafmtCheck

> p15/scalafmt
> p15/scalafmtCheck
# prevent reading the source (without changing the mtime) to detect actual/uncached invocation of scalafmt
$ exec chmod 000 p15/src/main/scala/Test.scala
######## full run expected when config was updated and a source file added since last run
$ copy-file .scalafmt.conf .scalafmt15.conf
$ copy-file changes/bad.scala p15/src/main/scala/Test2.scala
-> p15/scalafmt
-> p15/scalafmtCheck
######## full run expected when only config was updated since last run
$ delete p15/src/main/scala/Test2.scala
-> p15/scalafmt
-> p15/scalafmtCheck

> p16/scalafmt
> p16/scalafmtCheck
# prevent reading the source (without changing the mtime) to detect actual/uncached invocation of scalafmt
$ exec chmod 000 p16/src/main/scala/Test.scala
######## full run expected when config was updated and a source file added since last run
> set p16/scalafmtConfig := file(".scalafmt.conf")
$ copy-file changes/bad.scala p16/src/main/scala/Test2.scala
-> p16/scalafmt
-> p16/scalafmtCheck
######## full run expected when only config was updated since last run
$ delete p16/src/main/scala/Test2.scala
-> p16/scalafmt
-> p16/scalafmtCheck

$ copy-file changes/bad.scala p17/src/main/scala/Test2.scala
-> p17/scalafmtCheck
# prevent reading the source (without changing the mtime) to detect actual/uncached invocation of scalafmt
$ exec chmod 000 p17/src/main/scala/Test.scala
######## incremetnal checking should carry over failure without actually processing the file
-> p17/scalafmtCheck
######## incremental checking expected when all previous validations failed on some sources only
$ copy-file changes/good.scala p17/src/main/scala/Test2.scala
> p17/scalafmtCheck
> p17/scalafmt
